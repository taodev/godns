name: Build
on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { os: linux, arch: amd64 }
          - { os: windows, arch: amd64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24
      - name: Build
        run: |
          set -xeuo pipefail
          mkdir -p dist
          go build -v -trimpath -o dist/godns -ldflags '-s -w' ./cmd/godns
          cd dist
          bash ../scripts/update-geosite.sh
        shell: bash
        env:
          CGO_ENABLED: "0"
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GO386: ${{ matrix.go386 }}
          GOARM: ${{ matrix.goarm }}
          GOMIPS: ${{ matrix.gomips }}
          GOMIPS64: ${{ matrix.gomips }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set name
        run: |-
          # 根据触发类型设置目录名
          if [[ "${GITHUB_REF}" == "refs/tags/"* ]]; then
            DIR_NAME="godns-${GITHUB_REF_NAME}-${{ matrix.os }}-${{ matrix.arch }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            DIR_NAME="godns-develop-${{ matrix.os }}-${{ matrix.arch }}"
          else
            echo "Unsupported ref: ${GITHUB_REF}"
            exit 1
          fi
          echo "DIR_NAME=${DIR_NAME}" >> "${GITHUB_ENV}"
      - name: Archive
        run: |
          set -xeuo pipefail
          cd dist
          mkdir -p "${DIR_NAME}"
          cp ../LICENSE "${DIR_NAME}"
          if [ '${{ matrix.os }}' = 'windows' ]; then
            cp godns "${DIR_NAME}/godns.exe"
            cp geosite.dat ../conf/config.yaml "${DIR_NAME}"
            zip -r "${DIR_NAME}.zip" "${DIR_NAME}"
          else
            cp godns "${DIR_NAME}"
            cp geosite.dat ../conf/config.yaml "${DIR_NAME}"
            tar -czvf "${DIR_NAME}.tar.gz" "${DIR_NAME}"
          fi
          rm -r "${DIR_NAME}"
        shell: bash
      - name: Cleanup
        run: rm dist/godns dist/geosite.dat
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}_${{ matrix.arch }}
          path: "dist"
  upload:
    name: Upload builds
    if: "!failure()"
    runs-on: ubuntu-latest
    permissions:
        contents: write
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download builds
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Upload develop
        if: github.ref == 'refs/heads/main'
        run: |
          # 覆盖旧版本: 先删除已有的develop发布 (忽略不存在的错误)
          gh release delete -y "develop" || true
          gh release create develop --prerelease --generate-notes --title "develop" dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload tags
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          gh release create ${GITHUB_REF_NAME} --generate-notes --latest --title "${GITHUB_REF_NAME}" dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}