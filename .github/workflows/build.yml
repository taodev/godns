name: Build
on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { os: linux, arch: amd64 }
          - { os: windows, arch: amd64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.24
      - name: Set variables
        run: |
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        shell: bash
      - name: Build
        run: |
          set -xeuo pipefail
          mkdir -p dist
          go build -v -trimpath -o dist/godns -ldflags '-s -w' ./cmd/godns
          cd dist
          bash ../scripts/update-geosite.sh
        shell: bash
        env:
          CGO_ENABLED: "0"
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GO386: ${{ matrix.go386 }}
          GOARM: ${{ matrix.goarm }}
          GOMIPS: ${{ matrix.gomips }}
          GOMIPS64: ${{ matrix.gomips }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set name
        run: |-
          DIR_NAME="godns-1.0.0-${{ matrix.os }}-${{ matrix.arch }}"
          echo "DIR_NAME=${DIR_NAME}" >> "${GITHUB_ENV}"
      - name: Archive
        run: |
          set -xeuo pipefail
          cd dist
          mkdir -p "${DIR_NAME}"
          cp ../LICENSE "${DIR_NAME}"
          if [ '${{ matrix.os }}' = 'windows' ]; then
            cp godns "${DIR_NAME}/godns.exe"
            cp geosite.dat "${DIR_NAME}"
            zip -r "${DIR_NAME}.zip" "${DIR_NAME}"
          else
            cp godns "${DIR_NAME}"
            cp geosite.dat "${DIR_NAME}"
            tar -czvf "${DIR_NAME}.tar.gz" "${DIR_NAME}"
          fi
          rm -r "${DIR_NAME}"
        shell: bash
      - name: Cleanup
        run: |
          rm dist/godns
          rm dist/geosite.dat
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}_${{ matrix.arch }}
          path: "dist"
  upload:
    name: Upload builds
    if: "!failure()"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download builds
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Upload assets
        run: |
          gh release create "$TAG_NAME" dist/* \
            --title "$RELEASE_NAME" \
            --generate-notes \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG_NAME }}
          RELEASE_NAME: ${{ env.RELEASE_NAME }}